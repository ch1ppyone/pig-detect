import cv2
import os
import argparse
import torch
import numpy as np
from app import create_app
from app.config import logger, check_hardware, create_video_processor, VIDEO_PATH

def parse_args():
    parser = argparse.ArgumentParser(description="–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–≤–∏–Ω–µ–π")
    parser.add_argument("--device", type=str, default="cuda", choices=["cuda", "cpu"], help="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏ (cuda –∏–ª–∏ cpu)")
    parser.add_argument("--model", type=str, default=os.getenv('MODEL_PATH', "models/yolo11m-seg-mod.pt"), help="–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ YOLO")
    parser.add_argument("--video", type=str, default=VIDEO_PATH, help="–ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É")
    parser.add_argument("--pt-model", type=str, default=os.getenv('PT_MODEL_PATH', "models/pig_model.pth"), help="–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ PyTorch")
    parser.add_argument("--tracker-config", type=str, default=os.getenv('TRACKER_CONFIG', "models/bytetrack.yaml"), help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞")
    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    device = check_hardware()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if args.device == "cuda" and not torch.cuda.is_available():
        logger.warning("‚ö†Ô∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ CPU")
        device = "cpu"

    if device == "cpu":
        os.environ["CUDA_VISIBLE_DEVICES"] = ""
        logger.info("‚úÖ –ó–∞–ø—É—Å–∫ –Ω–∞ CPU")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VideoProcessor
    try:
        processor = create_video_processor(args.video)
        logger.info("‚úÖ VideoProcessor —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {str(e)}")
        raise

    app = create_app(processor)
    app.run(host="0.0.0.0", port=9001)
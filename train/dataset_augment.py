#!/usr/bin/env python3
"""
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–∞—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""

import os
import shutil
import random
import argparse
from pathlib import Path
import cv2
import numpy as np
import yaml
from tqdm import tqdm
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor
import multiprocessing as mp

def fast_augmentations():
    """–ë—ã—Å—Ç—Ä—ã–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π."""
    return [
        {
            'name': 'flip_h',
            'func': lambda img: cv2.flip(img, 1),
            'bbox_func': lambda bboxes: [[1-bbox[0], bbox[1], bbox[2], bbox[3]] for bbox in bboxes]
        },
        {
            'name': 'bright',
            'func': lambda img: cv2.convertScaleAbs(img, alpha=1.2, beta=15),
            'bbox_func': lambda bboxes: bboxes
        },
        {
            'name': 'dark',
            'func': lambda img: cv2.convertScaleAbs(img, alpha=0.8, beta=-15),
            'bbox_func': lambda bboxes: bboxes
        },
        {
            'name': 'contrast',
            'func': lambda img: cv2.convertScaleAbs(img, alpha=1.3, beta=0),
            'bbox_func': lambda bboxes: bboxes
        },
        {
            'name': 'blur',
            'func': lambda img: cv2.blur(img, (3, 3)),  # –ë—ã—Å—Ç—Ä–µ–µ —á–µ–º GaussianBlur
            'bbox_func': lambda bboxes: bboxes
        }
    ]

def read_yolo_fast(label_path):
    """–ë—ã—Å—Ç—Ä–æ–µ —á—Ç–µ–Ω–∏–µ YOLO —Ä–∞–∑–º–µ—Ç–∫–∏."""
    if not os.path.exists(label_path):
        return []
    
    try:
        with open(label_path, 'r') as f:
            return [line.strip().split() for line in f if line.strip()]
    except:
        return []

def write_yolo_fast(label_path, labels):
    """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å YOLO —Ä–∞–∑–º–µ—Ç–∫–∏."""
    try:
        with open(label_path, 'w') as f:
            for label in labels:
                f.write(' '.join(map(str, label)) + '\n')
    except:
        pass

def process_single_image(args):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏)."""
    img_path, label_path, output_images_dir, output_labels_dir, augmentations, aug_count = args
    
    try:
        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = cv2.imread(str(img_path))
        if image is None:
            return 0
        
        # –ß–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
        labels = read_yolo_fast(label_path)
        
        base_name = img_path.stem
        processed = 0
        
        # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        shutil.copy2(img_path, output_images_dir / img_path.name)
        if labels:
            write_yolo_fast(output_labels_dir / (base_name + '.txt'), labels)
        else:
            # –ü—É—Å—Ç–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞
            (output_labels_dir / (base_name + '.txt')).touch()
        processed += 1
        
        # –°–æ–∑–¥–∞–µ–º –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
        selected_augs = random.sample(augmentations, min(aug_count, len(augmentations)))
        
        for i, aug in enumerate(selected_augs):
            try:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é
                aug_image = aug['func'](image.copy())
                
                # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –±–æ–∫—Å—ã
                if labels:
                    bboxes = [[float(l[1]), float(l[2]), float(l[3]), float(l[4])] for l in labels]
                    aug_bboxes = aug['bbox_func'](bboxes)
                    aug_labels = [[labels[j][0]] + list(map(str, bbox)) for j, bbox in enumerate(aug_bboxes)]
                else:
                    aug_labels = []
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                aug_name = f"{base_name}_{aug['name']}"
                cv2.imwrite(str(output_images_dir / f"{aug_name}.jpg"), aug_image)
                write_yolo_fast(output_labels_dir / f"{aug_name}.txt", aug_labels)
                processed += 1
                
            except Exception as e:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        
        return processed
        
    except Exception as e:
        return 0

def fast_augment_dataset(source_dir, output_dir, augment_count=2, num_workers=None):
    """
    –ë—ã—Å—Ç—Ä–∞—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é.
    
    Args:
        source_dir: –ò—Å—Ö–æ–¥–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
        output_dir: –í—ã—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Å–µ—Ç
        augment_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        num_workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (None = –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    """
    
    source = Path(source_dir)
    output = Path(output_dir)
    
    if num_workers is None:
        num_workers = min(mp.cpu_count(), 8)  # –ú–∞–∫—Å–∏–º—É–º 8 –ø–æ—Ç–æ–∫–æ–≤
    
    print(f"‚ö° –ë—ã—Å—Ç—Ä–∞—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å {num_workers} –ø–æ—Ç–æ–∫–∞–º–∏")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    if output.exists():
        shutil.rmtree(output)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    for split in ['train', 'val', 'test']:
        (output / split / 'images').mkdir(parents=True, exist_ok=True)
        (output / split / 'labels').mkdir(parents=True, exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    augmentations = fast_augmentations()
    
    total_processed = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π split
    for split in ['train', 'val', 'test']:
        source_images = source / split / "images"
        source_labels = source / split / "labels"
        
        if not source_images.exists():
            continue
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        image_files = [f for f in source_images.iterdir() 
                      if f.suffix.lower() in {'.jpg', '.jpeg', '.png', '.bmp'}]
        
        if not image_files:
            continue
        
        print(f"\nüé® –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è {split}: {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        output_images_dir = output / split / "images"
        output_labels_dir = output / split / "labels"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏
        process_args = []
        for img_file in image_files:
            label_file = source_labels / (img_file.stem + '.txt')
            process_args.append((
                img_file, label_file, output_images_dir, output_labels_dir, 
                augmentations, augment_count
            ))
        
        # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        with ThreadPoolExecutor(max_workers=num_workers) as executor:
            results = list(tqdm(
                executor.map(process_single_image, process_args),
                total=len(process_args),
                desc=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {split}"
            ))
        
        split_processed = sum(results)
        total_processed += split_processed
        print(f"   ‚úÖ {split}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {split_processed} —Ñ–∞–π–ª–æ–≤")
    
    return total_processed

def create_fast_yaml(output_dir, total_count):
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ dataset.yaml."""
    output = Path(output_dir)
    
    config = {
        'path': str(output.resolve()),
        'train': 'train/images',
        'val': 'val/images',
        'test': 'test/images',
        'names': ['pig'],
        'nc': 1,
        'augmented': True,
        'total_images': total_count
    }
    
    yaml_path = output / "dataset.yaml"
    with open(yaml_path, 'w') as f:
        yaml.dump(config, f, default_flow_style=False)
    
    return yaml_path

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    parser = argparse.ArgumentParser(description="–ë—ã—Å—Ç—Ä–∞—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞")
    parser.add_argument("--source", type=str, default="train/object/pig", help="–ò—Å—Ö–æ–¥–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç")
    parser.add_argument("--output", type=str, default="train/object/pig_fast_aug", help="–í—ã—Ö–æ–¥–Ω–æ–π –¥–∞—Ç–∞—Å–µ—Ç")
    parser.add_argument("--count", type=int, default=2, help="–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    parser.add_argument("--workers", type=int, default=None, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤")
    
    args = parser.parse_args()
    
    print("‚ö° –ë–´–°–¢–†–ê–Ø –ê–£–ì–ú–ï–ù–¢–ê–¶–ò–Ø –î–ê–¢–ê–°–ï–¢–ê")
    print("=" * 50)
    
    if not os.path.exists(args.source):
        print(f"‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.source}")
        return
    
    start_time = cv2.getTickCount()
    
    try:
        # –ë—ã—Å—Ç—Ä–∞—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è
        total_processed = fast_augment_dataset(
            args.source, 
            args.output, 
            args.count,
            args.workers
        )
        
        # –°–æ–∑–¥–∞–µ–º yaml
        yaml_path = create_fast_yaml(args.output, total_processed)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è
        end_time = cv2.getTickCount()
        elapsed = (end_time - start_time) / cv2.getTickFrequency()
        
        print(f"\n‚ö° –ë–´–°–¢–†–ê–Ø –ê–£–ì–ú–ï–ù–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 50)
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_processed}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {total_processed/elapsed:.1f} —Ñ–∞–π–ª–æ–≤/—Å–µ–∫")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {args.output}")
        
        print(f"\nüéØ –ö–û–ú–ê–ù–î–ê –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø:")
        print(f"python train/train_yolo.py --dataset_dir {args.output} --class_name pig --epochs 100")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()



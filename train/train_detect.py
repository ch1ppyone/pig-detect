#!/usr/bin/env python3
"""
–û–±—É—á–µ–Ω–∏–µ YOLO: –º–æ–∂–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Å –Ω—É–ª—è –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å last/best.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç: –Ω—É–∂–Ω–æ –ª–∏ resume, –∏–ª–∏ –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫.
"""

import os
import argparse
import shutil
from pathlib import Path
import torch
from ultralytics import YOLO

def check_gpu():
    print(f"üß† PyTorch: {torch.__version__}")
    if torch.cuda.is_available():
        print(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞ ({torch.cuda.get_device_name(0)})")
        return 0
    else:
        print("‚ö†Ô∏è GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ CPU")
        return "cpu"

def fast_train_model(dataset_path, epochs=50, img_size=640, batch_size=16, weights=None, resume=False):
    device = check_gpu()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    if weights:
        print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å–∞: {weights}")
        model = YOLO(weights)
    else:
        print("üöÄ –°—Ç–∞—Ä—Ç—É–µ–º —Å yolo11n.pt")
        model = YOLO("yolo11n.pt")

    try:
        if resume:
            print("‚èØ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ...")
            results = model.train(resume=True, epochs=epochs, device=device)
        else:
            print("‚ñ∂ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ...")
            results = model.train(
                data=str(dataset_path),
                epochs=epochs,
                imgsz=img_size,
                batch=batch_size,
                device=device,
                workers=8,
                cache=False,
                amp=True,
                patience=10,
                save_period=10,
                val=True,
                plots=False,
                verbose=True,
                single_cls=True,
                rect=True,
                cos_lr=True,
                close_mosaic=10,
                hsv_h=0.015,
                hsv_s=0.7,
                hsv_v=0.4,
                degrees=0.0,
                translate=0.1,
                scale=0.5,
                shear=0.0,
                perspective=0.0,
                flipud=0.0,
                fliplr=0.5,
                mosaic=1.0,
                mixup=0.0,
                copy_paste=0.0
            )
        return results
    except AssertionError as e:
        if "nothing to resume" in str(e):
            print("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫...")
            results = model.train(
                data=str(dataset_path),
                epochs=epochs,
                imgsz=img_size,
                batch=batch_size,
                device=device,
                workers=8,
                amp=True,
                single_cls=True,
                cos_lr=True
            )
            return results
        else:
            raise

def main():
    parser = argparse.ArgumentParser(description="–û–±—É—á–µ–Ω–∏–µ YOLO")
    parser.add_argument("--dataset_dir", type=str, required=True, help="–ü—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É")
    parser.add_argument("--epochs", type=int, default=50, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö")
    parser.add_argument("--img_size", type=int, default=640, help="–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    parser.add_argument("--batch_size", type=int, default=16, help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞")
    parser.add_argument("--weights", type=str, default=None, help="–ü—É—Ç—å –∫ –≤–µ—Å–∞–º (last.pt –∏–ª–∏ best.pt)")
    parser.add_argument("--resume", action="store_true", help="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
    args = parser.parse_args()

    dataset_path = Path(args.dataset_dir)
    yaml_file = dataset_path / "dataset.yaml"
    if not yaml_file.exists():
        print(f"‚ùå dataset.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω: {yaml_file}")
        return

    fast_train_model(yaml_file, args.epochs, args.img_size, args.batch_size, args.weights, args.resume)

if __name__ == "__main__":
    main()

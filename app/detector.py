from ultralytics import YOLO
from .logging import logger


class Detector:
    def __init__(self, model_path, device, tracker_config="bytetrack.yaml"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ YOLO.

        Args:
            model_path (str): –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ YOLO.
            device (str): –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (cuda/cpu).
            tracker_config (str): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞.
        """
        self.model_path = model_path
        self.device = device
        self.tracker_config = tracker_config
        self.tracker_available = False  # –û—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ fuse_score

        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: model={model_path}, device={device}, tracker={tracker_config}")
        try:
            self.detector = YOLO(model_path)
            self.detector.to(device)
            logger.info(f"‚úÖ YOLO-–º–æ–¥–µ–ª—å {'–Ω–∞ GPU' if device == 'cuda' else '–Ω–∞ CPU'}")
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YOLO: {str(e)}")
            raise

    def detect_and_track(self, frame):
        """
        –î–µ—Ç–µ–∫—Ü–∏—è –∏ —Ç—Ä–µ–∫–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞–¥—Ä–µ.

        Args:
            frame: –í—Ö–æ–¥–Ω–æ–π –∫–∞–¥—Ä (numpy array).

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏/—Ç—Ä–µ–∫–∏–Ω–≥–∞.
        """
        try:
            results = self.detector.predict(frame, conf=0.5, verbose=True)
            num_objects = len(results[0].boxes) if results and results[0].boxes else 0
            logger.info(f"üîç –î–µ—Ç–µ–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ {num_objects} –æ–±—ä–µ–∫—Ç–æ–≤")
            return results
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –≤ detect_and_track: {str(e)}")
            return None
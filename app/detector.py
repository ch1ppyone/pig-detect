"""
–ú–æ–¥—É–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º YOLO.
–°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å Detector –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å–≤–∏–Ω–µ–π.
"""

from typing import Dict, List, Optional, Any
import os

import numpy as np
from ultralytics import YOLO
from .logging import logger


class DetectorError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞."""
    pass


class Detector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –±–∞–∑–µ YOLO."""
    
    def __init__(self, model_path: str, device: str, tracker_config: str = "bytetrack.yaml"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ YOLO.

        Args:
            model_path: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ YOLO
            device: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ('cuda' –∏–ª–∏ 'cpu')
            tracker_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
            
        Raises:
            DetectorError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
        """
        self.model_path = model_path
        self.device = device
        self.tracker_config = tracker_config
        self.tracker_available = False  # –û—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å fuse_score
        
        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ YOLO:")
        logger.info(f"   üìÅ –ú–æ–¥–µ–ª—å: {model_path}")
        logger.info(f"   üñ•Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
        logger.info(f"   üéØ –¢—Ä–µ–∫–µ—Ä: {tracker_config}")
        
        self._init_model()
    
    def _init_model(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ YOLO."""
        if not os.path.exists(self.model_path):
            raise DetectorError(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.model_path}")
        
        try:
            self.detector = YOLO(self.model_path)
            self.detector.to(self.device)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏
            model_type = getattr(self.detector.model, 'task', 'unknown')
            if 'segment' in str(model_type).lower():
                logger.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å, –Ω–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–µ—Ç–µ–∫—Ü–∏–æ–Ω–Ω–∞—è")
            else:
                logger.info(f"‚úÖ –î–µ—Ç–µ–∫—Ü–∏–æ–Ω–Ω–∞—è YOLO-–º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ {self.device}")
                
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YOLO: {str(e)}")
            raise DetectorError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}") from e

    def detect_and_track(self, frame: np.ndarray, conf: float = 0.5) -> Optional[List[Any]]:
        """
        –î–µ—Ç–µ–∫—Ü–∏—è –∏ —Ç—Ä–µ–∫–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞–¥—Ä–µ.

        Args:
            frame: –í—Ö–æ–¥–Ω–æ–π –∫–∞–¥—Ä (numpy array)
            conf: –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏

        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
        Raises:
            DetectorError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –¥–µ—Ç–µ–∫—Ü–∏–∏
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if frame is None or frame.size == 0:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–∞–¥—Ä")
                return None
            
            # –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
            results = self.detector.predict(
                frame, 
                conf=conf, 
                verbose=False,
                device=self.device
            )
            
            if not results or not results[0].boxes:
                logger.debug("üîç –û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                return results
            
            num_objects = len(results[0].boxes)
            logger.debug(f"üîç –î–µ—Ç–µ–∫—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ {num_objects} –æ–±—ä–µ–∫—Ç–æ–≤ (conf >= {conf})")
            
            return results
            
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏: {str(e)}")
            raise DetectorError(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏: {str(e)}") from e
    
    def get_model_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏."""
        try:
            return {
                'model_path': self.model_path,
                'device': self.device,
                'tracker_config': self.tracker_config,
                'tracker_available': self.tracker_available,
                'model_type': getattr(self.detector.model, 'task', 'unknown') if hasattr(self, 'detector') else 'unknown'
            }
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {str(e)}")
            return {}
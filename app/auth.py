"""
–ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–≤–∏–Ω–µ–π.
–°–æ–¥–µ—Ä–∂–∏—Ç Blueprint –¥–ª—è –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

from typing import Optional
from flask import Blueprint, render_template, redirect, url_for, flash, request, current_app
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user

from .db import DatabaseManager, User as DBUser
from .logging import logger


class AuthError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    pass


class User(UserMixin):
    """–ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Flask-Login."""
    
    def __init__(self, db_user: DBUser):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            db_user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.id = str(db_user.id)  # Flask-Login —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫—É
        self.username = db_user.username
        self.is_admin = db_user.is_admin
        self._db_user = db_user
    
    def __repr__(self):
        return f"<User {self.username} (admin: {self.is_admin})>"


class AuthService:
    """–°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
    
    def authenticate_user(self, username: str, password: str) -> Optional[User]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            with DatabaseManager(self.db_path) as db:
                db_user = db.verify_password(username, password)
                if db_user:
                    return User(db_user)
                return None
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
            raise AuthError(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}") from e
    
    def load_user_by_id(self, user_id: str) -> Optional[User]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID."""
        try:
            with DatabaseManager(self.db_path) as db:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
                with db._get_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT id, username, password_hash, is_admin FROM users WHERE id = ?", 
                        (int(user_id),)
                    )
                    row = cursor.fetchone()
                    
                    if row:
                        db_user = DBUser(
                            id=row[0],
                            username=row[1],
                            password_hash=row[2],
                            is_admin=bool(row[3])
                        )
                        return User(db_user)
                    return None
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            return None
    
    def register_user(self, username: str, password: str, is_admin: bool = False) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            with DatabaseManager(self.db_path) as db:
                return db.add_user(username, password, is_admin)
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
            raise AuthError(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}") from e


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
_auth_service: Optional[AuthService] = None
auth_bp = Blueprint('auth', __name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Ö–æ–¥–∞
login_manager = LoginManager()
login_manager.login_view = 'auth.login'
login_manager.login_message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.'
login_manager.login_message_category = 'info'

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ init_auth

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."""
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '')

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not username or not password:
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error')
            return render_template('login.html')

        try:
            user = _auth_service.authenticate_user(username, password)
            if user:
                login_user(user)
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
                
                next_page = request.args.get('next')
                if next_page and next_page.startswith('/'):  # –ó–∞—â–∏—Ç–∞ –æ—Ç redirect –∞—Ç–∞–∫
                    return redirect(next_page)
                return redirect(url_for('index'))
            else:
                flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error')
                logger.warning(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {username}")
                
        except AuthError as e:
            flash('–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', 'error')
            logger.error(f"üö® –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")

    return render_template('login.html')

@auth_bp.route('/logout')
@login_required
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."""
    logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.username} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    logout_user()
    flash('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'success')
    return redirect(url_for('auth.login'))

@auth_bp.route('/register', methods=['GET', 'POST'])
@login_required
def register():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    if not current_user.is_admin:
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', 'error')
        return redirect(url_for('index'))

    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '')
        confirm_password = request.form.get('confirm_password', '')
        is_admin = request.form.get('is_admin') == 'on'

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not username or not password:
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error')
            return render_template('register.html')

        if len(username) < 3:
            flash('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞', 'error')
            return render_template('register.html')

        if len(password) < 4:
            flash('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞', 'error')
            return render_template('register.html')

        if password != confirm_password:
            flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error')
            return render_template('register.html')

        try:
            success = _auth_service.register_user(username, password, is_admin)
            if success:
                flash(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', 'success')
                logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_user.username} —Å–æ–∑–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (admin: {is_admin})")
            else:
                flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
                
        except AuthError as e:
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error')
            logger.error(f"üö® –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")

    return render_template('register.html')

def init_auth(app, db_path: str) -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    
    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    global _auth_service
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        _auth_service = AuthService(db_path)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Flask-Login
        login_manager.init_app(app)

        @login_manager.user_loader
        def load_user(user_id: str) -> Optional[User]:
            """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –¥–ª—è Flask-Login."""
            if not user_id:
                return None
            return _auth_service.load_user_by_id(user_id)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º blueprint
        app.register_blueprint(auth_bp)
        
        logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–ë–î: {db_path})")
        
    except Exception as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        raise

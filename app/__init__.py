import torch
from flask import Flask
from flask_socketio import SocketIO
from queue import Queue
from .config import check_hardware, create_video_processor
from .logging import logger

app = Flask(__name__, template_folder="../template", static_folder="../static")
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024
socketio = SocketIO(app, cors_allowed_origins="*")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
frame_queue = Queue(maxsize=50)  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
processors = {}
background_tasks = {}


def create_app(processor=None):
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask.

    Args:
        processor: –≠–∫–∑–µ–º–ø–ª—è—Ä VideoProcessor (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).

    Returns:
        Flask: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    device = check_hardware()

    if processor is None:
        try:
            processor = create_video_processor()
            processors["default"] = processor
            logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {str(e)}")
            raise

    from . import routes
    return app


from . import routes
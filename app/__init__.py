"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–≤–∏–Ω–µ–π.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–±—Ä–∏—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
"""

from typing import Optional, Dict, Any
from queue import Queue

import torch
from flask import Flask
from flask_socketio import SocketIO

from .config import config_manager
from .logging import logger, configure_logging


class AppFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    @staticmethod
    def create_app(processor=None) -> Flask:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

        Args:
            processor: –≠–∫–∑–µ–º–ø–ª—è—Ä VideoProcessor (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask
        """
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        configure_logging(
            level=config_manager.config.log_level,
            log_file=config_manager.config.log_file,
            max_size_mb=config_manager.config.log_max_size_mb,
            backup_count=config_manager.config.log_backup_count
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = Flask(__name__, template_folder="../template", static_folder="../static")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Flask
        app.config.update({
            'MAX_CONTENT_LENGTH': config_manager.config.max_upload_size,
            'SECRET_KEY': config_manager.config.secret_key,
            'SESSION_TYPE': 'filesystem',
            'PERMANENT_SESSION_LIFETIME': config_manager.config.session_timeout
        })
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SocketIO
        socketio.init_app(app, cors_allowed_origins="*")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        device = config_manager.check_hardware()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not config_manager.validate_config():
            logger.error("üö® –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
            raise RuntimeError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if processor is None:
            try:
                processor = config_manager.create_video_processor()
                processors["default"] = processor
                logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: {str(e)}")
                logger.info("‚ÑπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ –≤–∏–¥–µ–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        AppFactory._register_components(app)
        
        return app
    
    @staticmethod
    def _register_components(app: Flask) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        from .auth import init_auth
        init_auth(app, config_manager.config.db_path)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã  
        from .routes import register_routes, register_socketio_events
        register_routes(app)
        register_socketio_events(socketio)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ—Ç –∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä
        
        logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
app = Flask(__name__, template_folder="../template", static_folder="../static")
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024
app.config['SECRET_KEY'] = config_manager.config.secret_key
socketio = SocketIO(app, cors_allowed_origins="*")

frame_queue: Queue = Queue(maxsize=50)
processors: Dict[str, Any] = {}
background_tasks: Dict[str, Any] = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def create_app(processor=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)."""
    return AppFactory.create_app(processor)
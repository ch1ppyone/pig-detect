import os
import argparse
import torch
from dotenv import load_dotenv
from .video_processor import VideoProcessor
from .logging import logger

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
load_dotenv()

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
parser = argparse.ArgumentParser(description="–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–≤–∏–Ω–µ–π")
parser.add_argument('--device', type=str, default='cuda', choices=['cpu', 'cuda'], help="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (cpu –∏–ª–∏ cuda)")
parser.add_argument('--imgsz', type=int, default=int(os.getenv('DEFAULT_IMGSZ', 640)), help="–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è YOLO")
parser.add_argument('--frame-skip', type=int, default=1, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö –∫–∞–¥—Ä–æ–≤")
args = parser.parse_args()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env
MODEL_PATH = os.getenv('MODEL_PATH', 'models/yolo11m-seg-mod.pt')
DB_PATH = os.getenv('DB_PATH', 'pig_states.db')
PT_MODEL_PATH = os.getenv('PT_MODEL_PATH', 'models/pig_model.pth')
VIDEO_PATH = os.getenv('VIDEO_PATH', 'test_data/pigs.mp4')
TEST_VIDEO_PATH = os.getenv('TEST_VIDEO_PATH', 'test_data/2.mp4')
DEFAULT_CONF = float(os.getenv('DEFAULT_CONF', 0.5))
TRACKER_CONFIG = os.getenv('TRACKER_CONFIG', 'models/bytetrack.yaml')
MAX_UPLOAD_SIZE = int(os.getenv('MAX_UPLOAD_SIZE', 100)) * 1024 * 1024

logger.info(f"üìÇ –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ YOLO: {MODEL_PATH}")
logger.info(f"üìÇ –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
logger.info(f"üìÇ –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ PyTorch: {PT_MODEL_PATH}")
logger.info(f"üìÇ –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ: {VIDEO_PATH}")
logger.info(f"üìÇ –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –≤–∏–¥–µ–æ: {TEST_VIDEO_PATH}")
logger.info(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞: {TRACKER_CONFIG}")

# –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
device = 'cpu' if args.device == 'cpu' or not torch.cuda.is_available() else 'cuda'
if device == 'cpu':
    os.environ["CUDA_VISIBLE_DEVICES"] = ""
    logger.info("‚úÖ –ó–∞–ø—É—Å–∫ –Ω–∞ CPU –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
else:
    logger.info("‚úÖ –ó–∞–ø—É—Å–∫ –Ω–∞ GPU –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

def check_hardware():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –≤–µ—Ä—Å–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫."""
    logger.info(f"üî• –í–µ—Ä—Å–∏—è PyTorch: {torch.__version__}")
    logger.info(f"‚ö° CUDA –¥–æ—Å—Ç—É–ø–Ω–∞ (PyTorch): {torch.cuda.is_available()}")
    if torch.cuda.is_available():
        logger.info(f"üéÆ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ CUDA: {torch.cuda.get_device_name(0)}")
    logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    return device

def create_video_processor(video_path=VIDEO_PATH):
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VideoProcessor."""
    try:
        processor = VideoProcessor(
            model_path=MODEL_PATH,
            device=device,
            video_path=video_path,
            tracker_config=TRACKER_CONFIG,
            pt_model_path=PT_MODEL_PATH,
            db_path=DB_PATH
        )
        return processor
    except Exception as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VideoProcessor: {str(e)}")
        raise

def get_color_for_track(track_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç—Ä–µ–∫–∞."""
    import random
    random.seed(track_id)
    return (
        random.randint(50, 255),
        random.randint(50, 255),
        random.randint(50, 255),
    )

def is_safe_filename(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
    import re
    return bool(re.match(r'^[\w\-\.][\w\-\.]*[\w\-\.]$', filename)) and '..' not in filename
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–≤–∏–Ω–µ–π.
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —Ñ–∞–±—Ä–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã.
"""

import os
import re
import random
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass

import torch
from dotenv import load_dotenv

from .logging import logger

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


@dataclass
class AppConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # Flask –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    secret_key: str
    flask_env: str
    flask_debug: bool
    host: str
    port: int
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –º–æ–¥–µ–ª—è–º
    model_path: str
    db_path: str
    pt_model_path: str
    video_path: str
    test_video_path: str
    tracker_config: str
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    upload_dir: str
    test_data_dir: str
    models_dir: str
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    default_conf: float
    min_confidence: float
    min_area: int
    max_area: int
    device: str
    torch_threads: int
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    max_upload_size: int
    db_timeout: int
    max_workers: int
    rate_limit_requests: int
    rate_limit_window: int
    session_timeout: int
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    allowed_video_extensions: List[str]
    allowed_image_extensions: List[str]
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_level: str
    log_file: str
    log_max_size_mb: int
    log_backup_count: int


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    
    def __init__(self):
        self._config = self._load_config()
        self._device = self._setup_device()
        
    def _load_config(self) -> AppConfig:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        return AppConfig(
            # Flask –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            secret_key=os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production'),
            flask_env=os.getenv('FLASK_ENV', 'development'),
            flask_debug=os.getenv('FLASK_DEBUG', 'False').lower() == 'true',
            host=os.getenv('HOST', '0.0.0.0'),
            port=int(os.getenv('PORT', '9001')),
            
            # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –º–æ–¥–µ–ª—è–º
            model_path=os.getenv('MODEL_PATH', 'models/yolo11n-mod.pt'),
            db_path=os.getenv('DB_PATH', 'pig_states.db'),
            pt_model_path=os.getenv('PT_MODEL_PATH', 'models/pig_model.pth'),
            video_path=os.getenv('VIDEO_PATH', 'webcam'),
            test_video_path=os.getenv('TEST_VIDEO_PATH', 'webcam'),
            tracker_config=os.getenv('TRACKER_CONFIG', 'models/bytetrack.yaml'),
            
            # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            upload_dir=os.getenv('UPLOAD_DIR', 'uploads'),
            test_data_dir=os.getenv('TEST_DATA_DIR', 'uploads'),
            models_dir=os.getenv('MODELS_DIR', 'models'),
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            default_conf=float(os.getenv('DEFAULT_CONF', '0.5')),
            min_confidence=float(os.getenv('MIN_CONFIDENCE', '0.6')),
            min_area=int(os.getenv('MIN_AREA', '800')),
            max_area=int(os.getenv('MAX_AREA', '200000')),
            device=os.getenv('DEVICE', 'cuda'),
            torch_threads=int(os.getenv('TORCH_THREADS', '4')),
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            max_upload_size=int(os.getenv('MAX_UPLOAD_SIZE', '100')) * 1024 * 1024,
            db_timeout=int(os.getenv('DB_TIMEOUT', '30')),
            max_workers=int(os.getenv('MAX_WORKERS', '4')),
            rate_limit_requests=int(os.getenv('RATE_LIMIT_REQUESTS', '60')),
            rate_limit_window=int(os.getenv('RATE_LIMIT_WINDOW', '60')),
            session_timeout=int(os.getenv('SESSION_TIMEOUT', '3600')),
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            allowed_video_extensions=os.getenv('ALLOWED_VIDEO_EXTENSIONS', 'mp4,avi,mov,mkv').split(','),
            allowed_image_extensions=os.getenv('ALLOWED_IMAGE_EXTENSIONS', 'jpg,jpeg,png,bmp').split(','),
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            log_level=os.getenv('LOG_LEVEL', 'INFO'),
            log_file=os.getenv('LOG_FILE', 'app.log'),
            log_max_size_mb=int(os.getenv('LOG_MAX_SIZE_MB', '10')),
            log_backup_count=int(os.getenv('LOG_BACKUP_COUNT', '5')),
        )
    
    def _setup_device(self) -> str:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        if self._config.device == 'cpu' or not torch.cuda.is_available():
            os.environ["CUDA_VISIBLE_DEVICES"] = ""
            device = 'cpu'
            logger.info("‚úÖ –ó–∞–ø—É—Å–∫ –Ω–∞ CPU –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            device = 'cuda'
            logger.info("‚úÖ –ó–∞–ø—É—Å–∫ –Ω–∞ GPU –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        torch.set_num_threads(self._config.torch_threads)
        return device

    
    @property
    def config(self) -> AppConfig:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        return self._config
    
    @property
    def device(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        return self._device
    
    def log_configuration(self) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        logger.info(f"üìÇ –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ YOLO: {self._config.model_path}")
        logger.info(f"üìÇ –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {self._config.db_path}")
        logger.info(f"üìÇ –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ PyTorch: {self._config.pt_model_path}")
        logger.info(f"üìÇ –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ: {self._config.video_path}")
        logger.info(f"üìÇ –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –≤–∏–¥–µ–æ: {self._config.test_video_path}")
        logger.info(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞: {self._config.tracker_config}")
    
    def check_hardware(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –≤–µ—Ä—Å–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫."""
        logger.info(f"üî• –í–µ—Ä—Å–∏—è PyTorch: {torch.__version__}")
        logger.info(f"‚ö° CUDA –¥–æ—Å—Ç—É–ø–Ω–∞ (PyTorch): {torch.cuda.is_available()}")
        if torch.cuda.is_available():
            logger.info(f"üéÆ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ CUDA: {torch.cuda.get_device_name(0)}")
        logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self._device}")
        return self._device
    
    def validate_config(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SECRET_KEY
        if self._config.secret_key == 'dev-secret-key-change-in-production':
            if self._config.flask_env == 'production':
                errors.append("SECRET_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
            else:
                logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π SECRET_KEY –≤ dev –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –∫ –º–æ–¥–µ–ª—è–º
        if not os.path.exists(self._config.model_path):
            logger.warning(f"‚ö†Ô∏è YOLO –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self._config.model_path}")
        
        if not os.path.exists(self._config.pt_model_path):
            logger.warning(f"‚ö†Ô∏è PyTorch –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self._config.pt_model_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for dir_path in [self._config.upload_dir, self._config.test_data_dir, self._config.models_dir]:
            if not os.path.exists(dir_path):
                try:
                    os.makedirs(dir_path, exist_ok=True)
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
                except Exception as e:
                    errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {dir_path}: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not (0.0 <= self._config.default_conf <= 1.0):
            errors.append("DEFAULT_CONF –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0.0, 1.0]")
        
        if not (0.0 <= self._config.min_confidence <= 1.0):
            errors.append("MIN_CONFIDENCE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0.0, 1.0]")
        
        if self._config.min_area >= self._config.max_area:
            errors.append("MIN_AREA –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ MAX_AREA")
        
        if errors:
            logger.error("üö® –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            for error in errors:
                logger.error(f"   - {error}")
            return False
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        return True
    
    def create_video_processor(self, video_path: Optional[str] = None, conf: Optional[float] = None):
        """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VideoProcessor."""
        from .video_processor import VideoProcessor
        
        try:
            if video_path is None:
                video_path = self._config.video_path
            if conf is None:
                conf = self._config.default_conf
                
            processor = VideoProcessor(
                model_path=self._config.model_path,
                device=self._device,
                video_path=video_path,
                tracker_config=self._config.tracker_config,
                pt_model_path=self._config.pt_model_path,
                db_path=self._config.db_path,
                conf=conf
            )
            return processor
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VideoProcessor: {str(e)}")
            raise


class SecurityUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    
    @staticmethod
    def is_safe_filename(filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        if not filename or '..' in filename:
            return False
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤–∏–¥–µ–æ
        special_sources = {'webcam', 'remote_camera'}
        if filename in special_sources:
            return True
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º—è–≥–∫—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        return bool(re.match(r'^[\w\-\.]+$', filename))
    
    @staticmethod
    def get_color_for_track(track_id: int) -> Tuple[int, int, int]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç—Ä–µ–∫–∞."""
        random.seed(track_id)
        return (
            random.randint(50, 255),
            random.randint(50, 255),
            random.randint(50, 255),
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_manager = ConfigManager()

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ä—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
MODEL_PATH = config_manager.config.model_path
DB_PATH = config_manager.config.db_path
PT_MODEL_PATH = config_manager.config.pt_model_path
VIDEO_PATH = config_manager.config.video_path
TEST_VIDEO_PATH = config_manager.config.test_video_path
DEFAULT_CONF = config_manager.config.default_conf
TRACKER_CONFIG = config_manager.config.tracker_config
device = config_manager.device

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def check_hardware():
    return config_manager.check_hardware()

def create_video_processor(video_path=None, conf=None):
    return config_manager.create_video_processor(video_path, conf)

def is_safe_filename(filename):
    return SecurityUtils.is_safe_filename(filename)

def get_color_for_track(track_id):
    return SecurityUtils.get_color_for_track(track_id)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
config_manager.log_configuration()
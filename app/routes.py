"""
–ú–∞—Ä—à—Ä—É—Ç—ã Flask –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–≤–∏–Ω–µ–π.
–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª–∞—Å—Å–æ–≤.
"""

import os
import base64
import threading
import subprocess
import shlex
import datetime
from typing import Dict, Any, Optional, List

import numpy as np
import cv2
from flask import render_template, jsonify, request, send_from_directory, Response
from flask_login import login_required

from flask import current_app
from . import socketio, frame_queue, processors, background_tasks
from .config import config_manager, SecurityUtils
from .logging import logger


class StreamManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤."""
    
    @staticmethod
    def frame_process_thread(processor_id: str) -> None:
        """–ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–æ–≤."""
        proc = processors.get(processor_id)
        if not proc:
            logger.error(f"üö® –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä {processor_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            logger.info(f"üé¨ –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ {processor_id}")
            frame_count = 0
            while proc.running:
                frame = proc.next_frame()
                if frame is None:
                    logger.debug("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–∞–¥—Ä")
                    socketio.sleep(0.1)
                    continue
                    
                if not isinstance(frame, np.ndarray):
                    logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–∞–¥—Ä–∞")
                    continue
                    
                ret, buf = cv2.imencode('.jpg', frame, [int(cv2.IMWRITE_JPEG_QUALITY), 80])
                if not ret:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–¥—Ä")
                    continue
                    
                data = base64.b64encode(buf).decode('utf-8')
                if frame_queue.full():
                    frame_queue.get()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–¥—Ä –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
                for client_id in background_tasks.keys():
                    frame_queue.put((client_id, data))
                
                frame_count += 1
                if frame_count % 30 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤
                    logger.debug(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(background_tasks)}")
                
                socketio.sleep(proc.delay)
                
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–æ–≤: {str(e)}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–µ
            for client_id in background_tasks.keys():
                socketio.emit('error', {'message': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞: {str(e)}'}, to=client_id)
    
    @staticmethod
    def frame_emit_thread() -> None:
        """–ü–æ—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–æ–≤."""
        logger.info("üì° –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–æ–≤")
        emit_count = 0
        while True:
            if not frame_queue.empty():
                client_id, data = frame_queue.get()
                try:
                    socketio.emit('video_frame', {'data': data}, to=client_id)
                    emit_count += 1
                    if emit_count % 30 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 –æ—Ç–ø—Ä–∞–≤–æ–∫
                        logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {emit_count} –∫–∞–¥—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç—É {client_id}")
                except Exception as e:
                    logger.error(f"üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É {client_id}: {str(e)}")
            socketio.sleep(0.05)
    
    @staticmethod
    def data_emit_thread(processor_id: str) -> None:
        """–ü–æ—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤."""
        proc = processors.get(processor_id)
        if not proc:
            logger.error(f"üö® –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä {processor_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        try:
            while proc.running:
                logs = proc.logs[-100:]
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
                for client_id in background_tasks.keys():
                    socketio.emit('log_update', {'logs': logs[:10]}, to=client_id)
                socketio.sleep(2)
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤: {str(e)}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–µ
            for client_id in background_tasks.keys():
                socketio.emit('error', {'message': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤: {str(e)}'}, to=client_id)


class FileManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤."""
    
    @staticmethod
    def get_source_files() -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ uploads."""
        uploads_dir = config_manager.config.upload_dir
        if not os.path.exists(uploads_dir):
            return []
        
        files = []
        for filename in os.listdir(uploads_dir):
            file_path = os.path.join(uploads_dir, filename)
            if not os.path.isfile(file_path):
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            extension = filename.lower().split('.')[-1]
            if extension in config_manager.config.allowed_video_extensions:
                file_type = 'üé¨ –í–∏–¥–µ–æ'
                type_label = '–í–∏–¥–µ–æ'
            elif extension in config_manager.config.allowed_image_extensions:
                file_type = 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
                type_label = '–§–æ—Ç–æ'
            else:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            try:
                size_bytes = os.path.getsize(file_path)
                size = FileManager._format_file_size(size_bytes)
            except Exception:
                size = "N/A"
            
            files.append({
                'name': filename,
                'type': file_type,
                'type_label': type_label,
                'size': size
            })
        
        return sorted(files, key=lambda x: x['name'])
    
    @staticmethod
    def _format_file_size(size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞."""
        if size_bytes < 1024:
            return f"{size_bytes} B"
        elif size_bytes < 1024 * 1024:
            return f"{size_bytes / 1024:.1f} KB"
        else:
            return f"{size_bytes / (1024 * 1024):.1f} MB"
    
    @staticmethod
    def get_file_info(filename: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ."""
        file_path = os.path.join(config_manager.config.upload_dir, filename)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        extension = filename.lower().split('.')[-1]
        if extension in config_manager.config.allowed_video_extensions:
            file_type = 'video'
            file_type_label = 'üé¨ –í–∏–¥–µ–æ'
        elif extension in config_manager.config.allowed_image_extensions:
            file_type = 'image'
            file_type_label = 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        else:
            file_type = 'unknown'
            file_type_label = '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø'
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        try:
            stat = os.stat(file_path)
            file_size = FileManager._format_file_size(stat.st_size)
            modified_time = datetime.datetime.fromtimestamp(stat.st_mtime).strftime('%d.%m.%Y %H:%M')
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {filename}: {str(e)}")
            file_size = "N/A"
            modified_time = "N/A"
        
        return {
            'filename': filename,
            'file_type': file_type,
            'file_type_label': file_type_label,
            'file_extension': extension,
            'file_size': file_size,
            'modified_time': modified_time
        }


class StateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    
    # –ö–µ—à –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    _db_cache = None
    _db_lock = threading.RLock()
    
    @staticmethod
    def get_db():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î."""
        with StateManager._db_lock:
            if StateManager._db_cache is None:
                from .db import DatabaseManager
                StateManager._db_cache = DatabaseManager(config_manager.config.db_path)
                logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ singleton —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î")
            return StateManager._db_cache
    
    @staticmethod
    def get_processor_or_create(client_id: str = "default"):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞."""
        processor = processors.get(client_id)
        if not processor:
            try:
                processor = config_manager.create_video_processor()
                processors[client_id] = processor
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
            except Exception as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {str(e)}")
                raise
        return processor
    
    @staticmethod
    def handle_training():
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏."""
        def runner():
            try:
                proc = StateManager.get_processor_or_create()
                states = proc.db.get_states()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
                missing = [
                    s for s in states
                    if not os.path.isdir(os.path.join("train", "dataset", s))
                    or not os.listdir(os.path.join("train", "dataset", s))
                ]
                
                if missing:
                    socketio.emit('training_warning', 
                                {'message': f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–æ–≤: {",".join(missing)}'})
                    return
                
                # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
                cmd = "python train/train_classify.py"
                process = subprocess.Popen(
                    shlex.split(cmd), 
                    stdout=subprocess.PIPE, 
                    stderr=subprocess.STDOUT, 
                    text=True
                )
                
                for line in process.stdout:
                    socketio.emit('training_log', {'log': line.strip()})
                
                code = process.wait()
                status = 'OK' if code == 0 else 'ERR'
                socketio.emit('training_complete', {'message': status})
                
                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
                proc.release()
                processors["default"] = config_manager.create_video_processor(proc.video_path)
                
            except Exception as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {str(e)}")
                socketio.emit('training_warning', {'message': f'–û—à–∏–±–∫–∞: {str(e)}'})
        
        threading.Thread(target=runner, daemon=True).start()


# === –ú–ê–†–®–†–£–¢–´ ===

def register_routes(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    @app.route("/")
    @login_required
    def index():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞."""
        try:
            files = FileManager.get_source_files()
            vids = [f for f in files if '–í–∏–¥–µ–æ' in f['type_label']]
            imgs = [f for f in files if '–§–æ—Ç–æ' in f['type_label']]
            sources = [(f['name'], f['type_label']) for f in vids + imgs]
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {str(e)}")
            sources = []

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫
        default = processors.get("default")
        current_source = "webcam"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if default:
            try:
                current_source = os.path.basename(default.video_path)
            except Exception:
                pass

        return render_template("index.html", sources=sources, current_source=current_source)


    @app.route("/get_source_files")
    @login_required
    def get_source_files():
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤."""
        try:
            logger.info("üìÅ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ uploads")
            files = FileManager.get_source_files()
            logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
            return jsonify(files=files)
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}")
            return jsonify(error="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"), 500


    @app.route('/preview/<filename>')
    @login_required
    def preview_file(filename: str):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞."""
        logger.info(f"üìã –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞: {filename}")
        
        if not SecurityUtils.is_safe_filename(filename):
            logger.error(f"üö® –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {filename}")
            return "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞", 400
        
        file_path = os.path.join(config_manager.config.upload_dir, filename)
        logger.info(f"üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")
        
        if not os.path.exists(file_path):
            logger.error(f"üö® –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
        
        logger.info(f"‚úÖ –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω preview.html –¥–ª—è —Ñ–∞–π–ª–∞: {filename}")
        
        try:
            file_info = FileManager.get_file_info(filename)
            return render_template('preview.html', **file_info)
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            return f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞: {str(e)}", 500


    @app.route('/uploads/<filename>')
    @login_required
    def serve_upload_file(filename: str):
        """–û—Ç–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ uploads."""
        if not SecurityUtils.is_safe_filename(filename):
            logger.error("üö® –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")
            return jsonify(error="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"), 400
        
        uploads_dir = os.path.abspath(config_manager.config.upload_dir)
        file_path = os.path.join(uploads_dir, filename)
        
        if not os.path.exists(file_path):
            logger.error(f"üö® –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
            return jsonify(error="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"), 404
        
        return send_from_directory(uploads_dir, filename)


    @app.route("/train_model", methods=["POST"])
    @login_required
    def train_model_route():
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."""
        StateManager.handle_training()
        logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞—á–∞—Ç–æ")
        return jsonify(message="–û–±—É—á–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ"), 200


    @app.route("/get_state_count")
    @login_required
    def get_state_count():
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
        try:
            db = StateManager.get_db()
            states = db.get_states()
            return jsonify(count=len(states))
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {str(e)}")
            return jsonify(error="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"), 500


    @app.route("/get_states")
    @login_required  
    def get_states():
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
        try:
            db = StateManager.get_db()
            states_dict = db.get_states()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
            states_list = [{"code": code, "description": desc} for code, desc in states_dict.items()]
            return jsonify(states=states_list)
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {str(e)}")
            return jsonify(error="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"), 500


    @app.route("/get_videos/<state_code>")
    @login_required
    def get_videos(state_code: str):
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π) –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        try:
            page = int(request.args.get('page', 1))
            per_page = 10
            
            logger.info(f"üìÇ –ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '{state_code}', —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if not SecurityUtils.is_safe_filename(state_code):
                logger.error(f"üö® –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {state_code}")
                return jsonify(error="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è"), 400
            
            # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_dir = os.path.join("train", "dataset", state_code)
            logger.info(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É: {state_dir}")
            
            if not os.path.exists(state_dir):
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {state_dir}")
                return jsonify(files=[], total_pages=0, current_page=page, total_files=0)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ (–≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            all_files = []
            all_files_in_dir = os.listdir(state_dir)
            logger.info(f"üìã –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {len(all_files_in_dir)}")
            
            video_count = 0
            image_count = 0
            other_count = 0
            
            for filename in all_files_in_dir:
                extension = filename.lower().split('.')[-1] if '.' in filename else ''
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                if extension in config_manager.config.allowed_video_extensions:
                    all_files.append(filename)
                    video_count += 1
                    logger.debug(f"üìπ –í–∏–¥–µ–æ —Ñ–∞–π–ª: {filename}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è  
                elif extension in config_manager.config.allowed_image_extensions:
                    all_files.append(filename)
                    image_count += 1
                    logger.debug(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filename}")
                else:
                    other_count += 1
                    logger.debug(f"‚ùì –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: {filename} (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {extension})")
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: –≤–∏–¥–µ–æ={video_count}, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π={image_count}, –¥—Ä—É–≥–∏—Ö={other_count}, –≤—Å–µ–≥–æ –º–µ–¥–∏–∞={len(all_files)}")
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            total = len(all_files)
            total_pages = (total + per_page - 1) // per_page
            start = (page - 1) * per_page
            end = start + per_page
            files = all_files[start:end]
            
            return jsonify(
                files=files,
                total_pages=total_pages,
                current_page=page,
                total_files=total
            )
            
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {state_code}: {str(e)}")
            return jsonify(error="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ"), 500


    @app.route("/delete_video/<state_code>", methods=["POST"])
    @login_required
    def delete_video(state_code: str):
        """API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ."""
        try:
            data = request.get_json()
            filename = data.get('filename')
            
            if not filename or not SecurityUtils.is_safe_filename(filename):
                return jsonify(error="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"), 400
            
            if not SecurityUtils.is_safe_filename(state_code):
                return jsonify(error="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è"), 400
            
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ
            dataset_file = os.path.join("train", "dataset", state_code, filename)
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ uploads (–µ—Å–ª–∏ –µ—Å—Ç—å)
            upload_file = os.path.join("uploads", filename)
            
            deleted_files = []
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
            if os.path.exists(dataset_file):
                os.remove(dataset_file)
                deleted_files.append(f"dataset/{state_code}/{filename}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ uploads
            if os.path.exists(upload_file):
                os.remove(upload_file)
                deleted_files.append(f"uploads/{filename}")
            
            if not deleted_files:
                return jsonify(error="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"), 404
            
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(deleted_files)}")
            return jsonify(message=f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", deleted=deleted_files)
            
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}")
            return jsonify(error="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞"), 500


    @app.route("/favicon.ico")
    def favicon():
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ favicon."""
        return '', 204  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º "No Content"


    @app.route("/upload_video/<state_code>", methods=["POST"])
    @login_required
    def upload_video(state_code: str):
        """API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –≤ –¥–∞—Ç–∞—Å–µ—Ç."""
        try:
            if not SecurityUtils.is_safe_filename(state_code):
                return jsonify(error="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è"), 400
            
            if 'video' not in request.files:
                return jsonify(error="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"), 400
            
            file = request.files['video']
            if file.filename == '':
                return jsonify(error="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"), 400
            
            if not SecurityUtils.is_safe_filename(file.filename):
                return jsonify(error="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"), 400
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            state_dir = os.path.join("train", "dataset", state_code)
            os.makedirs(state_dir, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            file_path = os.path.join(state_dir, file.filename)
            file.save(file_path)
            
            logger.info(f"‚úÖ –í–∏–¥–µ–æ {file.filename} –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {state_code}")
            return jsonify(message=f"–í–∏–¥–µ–æ {file.filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {str(e)}")
            return jsonify(error="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"), 500


    @app.route("/train/dataset/<state_code>/<filename>")
    @login_required
    def serve_dataset_file(state_code: str, filename: str):
        """–û—Ç–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
        try:
            if not SecurityUtils.is_safe_filename(state_code) or not SecurityUtils.is_safe_filename(filename):
                return jsonify(error="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"), 400
            
            dataset_dir = os.path.join("train", "dataset", state_code)
            file_path = os.path.join(dataset_dir, filename)
            
            if not os.path.exists(file_path):
                return jsonify(error="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"), 404
            
            return send_from_directory(os.path.abspath(dataset_dir), filename)
            
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –æ—Ç–¥–∞—á–∏ —Ñ–∞–π–ª–∞ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞: {str(e)}")
            return jsonify(error="–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É"), 500


def register_socketio_events(socketio):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SocketIO —Å–æ–±—ã—Ç–∏–π."""
    
    logger.info("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SocketIO —Å–æ–±—ã—Ç–∏–π...")
    
    @socketio.on('connect')
    def on_connect():
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        client_id = request.sid
        logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫–ª–∏–µ–Ω—Ç {client_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        if "default" not in processors:
            try:
                processors["default"] = config_manager.create_video_processor()
                logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –æ–±—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            except Exception as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {str(e)}")
                socketio.emit('error', {'message': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {str(e)}'}, to=client_id)
                return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        if client_id not in background_tasks:
            background_tasks[client_id] = [
                socketio.start_background_task(StreamManager.frame_process_thread, "default"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º default –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
                socketio.start_background_task(StreamManager.data_emit_thread, "default")      # –ò—Å–ø–æ–ª—å–∑—É–µ–º default –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            ]
            logger.info(f"üé¨ –°–æ–∑–¥–∞–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
        
        if not hasattr(StreamManager.frame_emit_thread, 'started'):
            socketio.start_background_task(StreamManager.frame_emit_thread)
            StreamManager.frame_emit_thread.started = True
            logger.info("üì° –ó–∞–ø—É—â–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–æ–≤")


    @socketio.on('disconnect')
    def on_disconnect():
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        client_id = request.sid
        # –ù–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, —Ç–æ–ª—å–∫–æ —É–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–ª–∏–µ–Ω—Ç–∞
        background_tasks.pop(client_id, None)
        logger.info(f"üßπ –ö–ª–∏–µ–Ω—Ç {client_id} –æ—Ç–∫–ª—é—á—ë–Ω")
        # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä "default" –æ—Å—Ç–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤


    @socketio.on('set_video_source')
    def handle_set_video_source(data):
        """–°–º–µ–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ."""
        logger.info(f"üì® –ü–û–õ–£–ß–ï–ù–û —Å–æ–±—ã—Ç–∏–µ set_video_source: {data}")
        
        client_id = request.sid
        src = data.get('source') if data else None
        
        logger.info(f"üîÑ –ó–∞–ø—Ä–æ—Å —Å–º–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: '{src}'")
        
        if not src:
            logger.error(f"üö® –ü—É—Å—Ç–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
            socketio.emit('error', {'message': '–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω'}, to=client_id)
            return
            
        if not SecurityUtils.is_safe_filename(src):
            logger.error(f"üö® –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{src}' –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
            socketio.emit('error', {'message': f'–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {src}'}, to=client_id)
            return
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        old = processors.pop("default", None)
        if old:
            old.running = False
            try:
                old.release()
                logger.info("üßπ –°—Ç–∞—Ä—ã–π –æ–±—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω")
            except Exception as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {str(e)}")
        
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–¥—Ä–æ–≤
        with frame_queue.mutex:
            frame_queue.queue.clear()
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
            if src == 'webcam':
                video_path = 'webcam'
            elif src == 'remote_camera':
                logger.warning("‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–Ω–∞—è –∫–∞–º–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–∫–∞–º–µ—Ä—É")
                video_path = 'webcam'
            else:
                video_path = os.path.join(config_manager.config.upload_dir, src)
                if not os.path.exists(video_path):
                    raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
            
            logger.info(f"üìπ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –ø—É—Ç–∏: {video_path}")
            new_proc = config_manager.create_video_processor(video_path)
            processors["default"] = new_proc
            logger.info("‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            client_count = len(background_tasks)
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è {client_count} –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
            
            for bg_client_id in list(background_tasks.keys()):
                background_tasks[bg_client_id] = [
                    socketio.start_background_task(StreamManager.frame_process_thread, "default"),
                    socketio.start_background_task(StreamManager.data_emit_thread, "default")
                ]
                logger.debug(f"üé¨ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {bg_client_id}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            socketio.emit('source_changed', {'message': f'–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {src}'})
            logger.info(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{src}' (–ø—É—Ç—å: {video_path})")
            
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{src}': {str(e)}")
            import traceback
            logger.error(f"üö® –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            socketio.emit('error', {'message': f'–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {str(e)}'}, to=client_id)


    @socketio.on('request_logs')
    def handle_log_request(data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç—É."""
        client_id = data.get('clientId')
        proc = processors.get("default")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        logs = proc.logs[-100:] if proc else []
        try:
            socketio.emit('log_update', {'logs': logs[:10]}, to=client_id)
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤: {str(e)}")


    @socketio.on('request_chart_data')
    def handle_chart_data_request(data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤."""
        client_id = data.get('clientId')
        proc = processors.get("default")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        counts = proc.track_labels if proc else {}
        durations = proc.state_durations if proc else {}
        
        logger.debug(f"üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∫–ª–∏–µ–Ω—Ç—É {client_id}: counts={len(counts)}, durations={len(durations)}")
        
        try:
            socketio.emit('chart_update', {
                'state_counts': counts,
                'state_durations': durations
            }, to=client_id)
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤: {str(e)}")

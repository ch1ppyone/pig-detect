import os
import sqlite3
import threading
from .logging import logger


class DatabaseManager:
    def __init__(self, db_path, yolo_model=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        Args:
            db_path (str): –ü—É—Ç—å –∫ SQLite DB.
            yolo_model: –ú–æ–¥–µ–ª—å YOLO (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
        """
        self.db_path = db_path
        self.state_cache = None
        self.yolo_model = yolo_model
        self.lock = threading.Lock()
        logger.info(f"üìÇ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        self.init_db()

    def init_db(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã states."""
        with self.lock:
            try:
                with sqlite3.connect(self.db_path, timeout=30) as conn:
                    c = conn.cursor()
                    c.execute("""
                        CREATE TABLE IF NOT EXISTS states (
                            code TEXT PRIMARY KEY,
                            description TEXT NOT NULL
                        )
                    """)
                    c.execute("SELECT COUNT(*) FROM states")
                    count = c.fetchone()[0]
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ states")
                    if count == 0:
                        initial = [
                            ("Feeding", "–°–æ—Å—Ç–æ—è–Ω–∏–µ: Feeding"),
                            ("Lateral_Lying", "–°–æ—Å—Ç–æ—è–Ω–∏–µ: Lateral_Lying"),
                            ("Sitting", "–°–æ—Å—Ç–æ—è–Ω–∏–µ: Sitting"),
                            ("Standing", "–°–æ—Å—Ç–æ—è–Ω–∏–µ: Standing"),
                            ("Sternal_Lying", "–°–æ—Å—Ç–æ—è–Ω–∏–µ: Sternal_Lying")
                        ]
                        c.executemany("INSERT INTO states VALUES (?, ?)", initial)
                        conn.commit()
                        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏: {initial}")
            except sqlite3.OperationalError as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                raise

    def get_states(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        if self.state_cache is None:
            with self.lock:
                try:
                    with sqlite3.connect(self.db_path, timeout=30) as conn:
                        c = conn.cursor()
                        c.execute("SELECT code, description FROM states")
                        self.state_cache = {r[0]: r[1] for r in c.fetchall()}
                        logger.info(f"üè∑Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {self.state_cache}")
                except sqlite3.OperationalError as e:
                    logger.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π: {str(e)}")
                    raise
        return self.state_cache

    def load_class_names(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–º—ë–Ω –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        states = self.get_states()
        class_names = list(states.keys())
        if not class_names:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã")
            class_names = ['Feeding', 'Lateral_Lying', 'Sitting', 'Standing', 'Sternal_Lying']
        logger.info(f"üè∑Ô∏è –ò–º–µ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {class_names}")
        return class_names

    def add_state(self, code, desc):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        with self.lock:
            try:
                with sqlite3.connect(self.db_path, timeout=30) as conn:
                    c = conn.cursor()
                    c.execute("INSERT INTO states VALUES (?, ?)", (code, desc))
                    conn.commit()
                    os.makedirs(os.path.join("train", "states", code), exist_ok=True)
                    self.state_cache = None
                    logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {code}")
                    return True
            except sqlite3.IntegrityError:
                logger.error(f"üö® –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ {code}: —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            except sqlite3.OperationalError as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
                raise

    def update_state(self, old, new, desc):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        with self.lock:
            try:
                with sqlite3.connect(self.db_path, timeout=30) as conn:
                    c = conn.cursor()
                    c.execute("UPDATE states SET code=?, description=? WHERE code=?", (new, desc, old))
                    if c.rowcount:
                        conn.commit()
                        if old != new:
                            os.rename(
                                os.path.join("train", "states", old),
                                os.path.join("train", "states", new)
                            )
                        self.state_cache = None
                        logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {old} -> {new}")
                        return True
                    return False
            except sqlite3.IntegrityError:
                logger.error(f"üö® –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ {old}: –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∫–æ–¥–∞")
                return False
            except sqlite3.OperationalError as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
                raise

    def delete_state(self, code):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        with self.lock:
            try:
                with sqlite3.connect(self.db_path, timeout=30) as conn:
                    c = conn.cursor()
                    c.execute("DELETE FROM states WHERE code=?", (code,))
                    if c.rowcount:
                        conn.commit()
                        folder = os.path.join("train", "states", code)
                        if os.path.isdir(folder):
                            for f in os.listdir(folder):
                                os.remove(os.path.join(folder, f))
                            os.rmdir(folder)
                        self.state_cache = None
                        logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {code}")
                        return True
                    return False
            except sqlite3.OperationalError as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
                raise

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        self.state_cache = None
        logger.info(f"üßπ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö {self.db_path} –∑–∞–∫—Ä—ã—Ç–æ")
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite.
–°–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
"""

import os
import sqlite3
import threading
from contextlib import contextmanager
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass

from werkzeug.security import generate_password_hash, check_password_hash
from .logging import logger


@dataclass
class User:
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    id: int
    username: str
    password_hash: str
    is_admin: bool


@dataclass
class State:
    """–ú–æ–¥–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    code: str
    description: str


class DatabaseError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    pass


class DatabaseManager:
    def __init__(self, db_path: str, yolo_model=None, timeout: int = 30):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        Args:
            db_path: –ü—É—Ç—å –∫ SQLite DB.
            yolo_model: –ú–æ–¥–µ–ª—å YOLO (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
            timeout: –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
        """
        self.db_path = db_path
        self.timeout = timeout
        self.yolo_model = yolo_model
        self._lock = threading.RLock()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º RLock –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        self._state_cache: Optional[Dict[str, str]] = None
        self._connection_pool = threading.local()
        
        logger.info(f"üìÇ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        self._init_database()
    
    @contextmanager
    def _get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –ë–î."""
        try:
            conn = sqlite3.connect(self.db_path, timeout=self.timeout)
            conn.execute("PRAGMA foreign_keys = ON")  # –í–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
            conn.execute("PRAGMA journal_mode = WAL")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º WAL —Ä–µ–∂–∏–º
            yield conn
        except sqlite3.Error as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}")
            raise DatabaseError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}") from e
        finally:
            conn.close()

    def _init_database(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –ë–î."""
        with self._lock:
            try:
                with self._get_connection() as conn:
                    cursor = conn.cursor()
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                    self._create_tables(cursor)
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                    self._init_default_data(cursor)
                    
                    conn.commit()
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                    
            except Exception as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {str(e)}")
                raise DatabaseError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {str(e)}") from e
    
    def _create_tables(self, cursor: sqlite3.Cursor) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î."""
        tables = {
            'states': """
                CREATE TABLE IF NOT EXISTS states (
                    code TEXT PRIMARY KEY,
                    description TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """,
            'users': """
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE NOT NULL,
                    password_hash TEXT NOT NULL,
                    is_admin BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """,
            'state_translations': """
                CREATE TABLE IF NOT EXISTS state_translations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    state_code TEXT NOT NULL,
                    language TEXT NOT NULL,
                    translation TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(state_code, language),
                    FOREIGN KEY (state_code) REFERENCES states(code) ON DELETE CASCADE
                )
            """
        }
        
        for table_name, query in tables.items():
            cursor.execute(query)
            logger.debug(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
    
    def _init_default_data(self, cursor: sqlite3.Cursor) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        cursor.execute("SELECT COUNT(*) FROM states")
        states_count = cursor.fetchone()[0]
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {states_count} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ states")
        
        if states_count == 0:
            default_states = [
                ("Feeding", "–°–æ—Å—Ç–æ—è–Ω–∏–µ: Feeding"),
                ("Lateral_Lying", "–°–æ—Å—Ç–æ—è–Ω–∏–µ: Lateral_Lying"),
                ("Sitting", "–°–æ—Å—Ç–æ—è–Ω–∏–µ: Sitting"),
                ("Standing", "–°–æ—Å—Ç–æ—è–Ω–∏–µ: Standing"),
                ("Sternal_Lying", "–°–æ—Å—Ç–æ—è–Ω–∏–µ: Sternal_Lying")
            ]
            cursor.executemany("INSERT INTO states (code, description) VALUES (?, ?)", default_states)
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(default_states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        cursor.execute("SELECT COUNT(*) FROM users WHERE username = ?", ("admin",))
        admin_count = cursor.fetchone()[0]
        
        if admin_count == 0:
            admin_password_hash = generate_password_hash("admin")
            cursor.execute(
                "INSERT INTO users (username, password_hash, is_admin) VALUES (?, ?, ?)",
                ("admin", admin_password_hash, True)
            )
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (admin/admin)")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        cursor.execute("SELECT COUNT(*) FROM state_translations")
        translations_count = cursor.fetchone()[0]
        
        if translations_count == 0:
            default_translations = [
                ("Feeding", "ru", "–ö–æ—Ä–º–ª–µ–Ω–∏–µ"),
                ("Sitting", "ru", "–°–∏–¥–∏—Ç"),
                ("Standing", "ru", "–°—Ç–æ–∏—Ç"),
                ("Lateral_Lying", "ru", "–õ–µ–∂–∏—Ç –Ω–∞ –±–æ–∫—É"),
                ("Sternal_Lying", "ru", "–õ–µ–∂–∏—Ç –Ω–∞ –∂–∏–≤–æ—Ç–µ"),
                ("Feeding", "en", "Feeding"),
                ("Sitting", "en", "Sitting"),
                ("Standing", "en", "Standing"),
                ("Lateral_Lying", "en", "Lateral Lying"),
                ("Sternal_Lying", "en", "Sternal Lying")
            ]
            cursor.executemany(
                "INSERT INTO state_translations (state_code, language, translation) VALUES (?, ?, ?)",
                default_translations
            )
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(default_translations)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    def get_states(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        if self._state_cache is None:
            with self._lock:
                try:
                    with self._get_connection() as conn:
                        cursor = conn.cursor()
                        cursor.execute("SELECT code, description FROM states ORDER BY code")
                        self._state_cache = {row[0]: row[1] for row in cursor.fetchall()}
                        logger.info(f"üè∑Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self._state_cache)} —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –ë–î")
                except Exception as e:
                    logger.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π: {str(e)}")
                    raise DatabaseError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π: {str(e)}") from e
        return self._state_cache

    def load_class_names(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–º—ë–Ω –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        states = self.get_states()
        class_names = list(states.keys())
        
        if not class_names:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã")
            class_names = ['Feeding', 'Lateral_Lying', 'Sitting', 'Standing', 'Sternal_Lying']
        
        logger.info(f"üè∑Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(class_names)} –∫–ª–∞—Å—Å–æ–≤: {class_names}")
        return class_names

    def add_state(self, code: str, description: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        with self._lock:
            try:
                with self._get_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute(
                        "INSERT INTO states (code, description) VALUES (?, ?)", 
                        (code, description)
                    )
                    conn.commit()
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞
                    dataset_dir = os.path.join("train", "dataset", code)
                    os.makedirs(dataset_dir, exist_ok=True)
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
                    self._state_cache = None
                    
                    logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {code} - {description}")
                    return True
                    
            except sqlite3.IntegrityError:
                logger.error(f"üö® –°–æ—Å—Ç–æ—è–Ω–∏–µ {code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            except Exception as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {code}: {str(e)}")
                raise DatabaseError(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}") from e

    def update_state(self, old_code: str, new_code: str, description: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        with self._lock:
            try:
                with self._get_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute(
                        "UPDATE states SET code=?, description=? WHERE code=?", 
                        (new_code, description, old_code)
                    )
                    
                    if cursor.rowcount == 0:
                        logger.warning(f"‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ {old_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                        return False
                    
                    conn.commit()
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É –¥–∞—Ç–∞—Å–µ—Ç–∞ –µ—Å–ª–∏ –∫–æ–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if old_code != new_code:
                        old_dir = os.path.join("train", "dataset", old_code)
                        new_dir = os.path.join("train", "dataset", new_code)
                        if os.path.exists(old_dir):
                            os.rename(old_dir, new_dir)
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
                    self._state_cache = None
                    
                    logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {old_code} -> {new_code}")
                    return True
                    
            except sqlite3.IntegrityError:
                logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è {old_code}: –∫–æ–¥ {new_code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            except Exception as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {old_code}: {str(e)}")
                raise DatabaseError(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}") from e

    def delete_state(self, code: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        with self._lock:
            try:
                with self._get_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute("DELETE FROM states WHERE code=?", (code,))
                    
                    if cursor.rowcount == 0:
                        logger.warning(f"‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                        return False
                    
                    conn.commit()
                    
                    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –¥–∞—Ç–∞—Å–µ—Ç–∞
                    dataset_dir = os.path.join("train", "dataset", code)
                    if os.path.exists(dataset_dir):
                        import shutil
                        shutil.rmtree(dataset_dir)
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞: {dataset_dir}")
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
                    self._state_cache = None
                    
                    logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {code}")
                    return True
                    
            except Exception as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {code}: {str(e)}")
                raise DatabaseError(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}") from e

    def get_user(self, username: str) -> Optional[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏."""
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT id, username, password_hash, is_admin FROM users WHERE username = ?", 
                    (username,)
                )
                row = cursor.fetchone()
                
                if row:
                    return User(
                        id=row[0],
                        username=row[1],
                        password_hash=row[2],
                        is_admin=bool(row[3])
                    )
                return None
                
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
            raise DatabaseError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}") from e

    def verify_password(self, username: str, password: str) -> Optional[User]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user = self.get_user(username)
        if user and check_password_hash(user.password_hash, password):
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
            return user
        
        logger.warning(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        return None

    def add_user(self, username: str, password: str, is_admin: bool = False) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        with self._lock:
            try:
                with self._get_connection() as conn:
                    cursor = conn.cursor()
                    password_hash = generate_password_hash(password)
                    cursor.execute(
                        "INSERT INTO users (username, password_hash, is_admin) VALUES (?, ?, ?)",
                        (username, password_hash, is_admin)
                    )
                    conn.commit()
                    
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω (admin: {is_admin})")
                    return True
                    
            except sqlite3.IntegrityError:
                logger.error(f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            except Exception as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
                raise DatabaseError(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}") from e

    def get_translations(self, language: str = 'ru') -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞."""
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT state_code, translation FROM state_translations WHERE language = ? ORDER BY state_code", 
                    (language,)
                )
                translations = {row[0]: row[1] for row in cursor.fetchall()}
                logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(translations)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —è–∑—ã–∫–∞ '{language}'")
                return translations
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —è–∑—ã–∫–∞ {language}: {str(e)}")
            return {}

    def get_all_translations(self) -> Dict[str, Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º."""
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT state_code, language, translation FROM state_translations ORDER BY state_code, language"
                )
                
                result = {}
                for state_code, language, translation in cursor.fetchall():
                    if state_code not in result:
                        result[state_code] = {}
                    result[state_code][language] = translation
                
                logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è {len(result)} —Å–æ—Å—Ç–æ—è–Ω–∏–π")
                return result
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {str(e)}")
            return {}

    def update_translation(self, state_code: str, language: str, translation: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        with self._lock:
            try:
                with self._get_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute("""
                        INSERT OR REPLACE INTO state_translations (state_code, language, translation) 
                        VALUES (?, ?, ?)
                    """, (state_code, language, translation))
                    conn.commit()
                    
                    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–≤–æ–¥: {state_code} ({language}) = '{translation}'")
                    return True
                    
            except Exception as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ {state_code}: {str(e)}")
                return False

    def delete_translation(self, state_code: str, language: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        with self._lock:
            try:
                with self._get_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute(
                        "DELETE FROM state_translations WHERE state_code = ? AND language = ?", 
                        (state_code, language)
                    )
                    
                    if cursor.rowcount == 0:
                        logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥ {state_code} ({language}) –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                        return False
                    
                    conn.commit()
                    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω –ø–µ—Ä–µ–≤–æ–¥: {state_code} ({language})")
                    return True
                    
            except Exception as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ {state_code}: {str(e)}")
                return False
    
    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞."""
        with self._lock:
            self._state_cache = None
            logger.debug("üßπ –ö—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—á–∏—â–µ–Ω")
    
    def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        with self._lock:
            self._state_cache = None
            logger.info(f"üßπ –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {self.db_path} –∑–∞–∫—Ä—ã—Ç")
    
    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        self.close()
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–∞.
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, str(Path(__file__).parent))

def check_dataset_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞—Ç–∞—Å–µ—Ç–∞."""
    print("üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞—Ç–∞—Å–µ—Ç–∞")
    print("=" * 50)
    
    try:
        from app.config import config_manager
        from app.routes import StateManager
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –ë–î
        db = StateManager.get_db()
        states = db.get_states()
        
        print(f"üè∑Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ë–î: {len(states)}")
        for code, desc in states.items():
            print(f"   ‚Ä¢ {code}: {desc}")
        
        print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
        
        dataset_root = os.path.join("train", "dataset")
        if not os.path.exists(dataset_root):
            print(f"‚ùå –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dataset_root}")
            return False
        
        print(f"‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞: {dataset_root}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        for state_code in states.keys():
            state_dir = os.path.join(dataset_root, state_code)
            print(f"\nüìã –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state_code}")
            print(f"   –ü–∞–ø–∫–∞: {state_dir}")
            
            if not os.path.exists(state_dir):
                print("   ‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            try:
                all_files = os.listdir(state_dir)
                print(f"   üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(all_files)}")
                
                if len(all_files) == 0:
                    print("   ‚ö†Ô∏è –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞—è")
                    continue
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
                video_files = []
                image_files = []
                other_files = []
                
                video_extensions = config_manager.config.allowed_video_extensions
                image_extensions = config_manager.config.allowed_image_extensions
                
                for filename in all_files:
                    extension = filename.lower().split('.')[-1] if '.' in filename else ''
                    
                    if extension in video_extensions:
                        video_files.append(filename)
                    elif extension in image_extensions:
                        image_files.append(filename)
                    else:
                        other_files.append(filename)
                
                print(f"   üé¨ –í–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: {len(video_files)}")
                for video in video_files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"      ‚Ä¢ {video}")
                if len(video_files) > 3:
                    print(f"      ... –∏ –µ—â–µ {len(video_files) - 3}")
                
                print(f"   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
                for image in image_files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"      ‚Ä¢ {image}")
                if len(image_files) > 3:
                    print(f"      ... –∏ –µ—â–µ {len(image_files) - 3}")
                
                if other_files:
                    print(f"   ‚ùì –î—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(other_files)}")
                    for other in other_files[:3]:
                        print(f"      ‚Ä¢ {other}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: {str(e)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞: {str(e)}")
        import traceback
        print(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return False

def test_api_endpoint():
    """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ get_videos."""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞")
    print("=" * 50)
    
    try:
        from app.routes import StateManager
        from app.config import config_manager
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        db = StateManager.get_db()
        states = list(db.get_states().keys())
        
        if not states:
            print("‚ùå –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        test_state = states[0]
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {test_state}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ get_videos
        state_dir = os.path.join("train", "dataset", test_state)
        print(f"üìÅ –ü—É—Ç—å: {state_dir}")
        
        if not os.path.exists(state_dir):
            print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        
        all_files = []
        all_files_in_dir = os.listdir(state_dir)
        print(f"üìã –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {len(all_files_in_dir)}")
        
        video_count = 0
        image_count = 0
        other_count = 0
        
        for filename in all_files_in_dir:
            extension = filename.lower().split('.')[-1] if '.' in filename else ''
            
            if extension in config_manager.config.allowed_video_extensions:
                all_files.append(filename)
                video_count += 1
            elif extension in config_manager.config.allowed_image_extensions:
                all_files.append(filename)
                image_count += 1
            else:
                other_count += 1
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
        print(f"   üé¨ –í–∏–¥–µ–æ: {video_count}")
        print(f"   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_count}")
        print(f"   ‚ùì –î—Ä—É–≥–∏–µ: {other_count}")
        print(f"   ‚úÖ –í—Å–µ–≥–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {len(all_files)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        per_page = 10
        total_pages = (len(all_files) + per_page - 1) // per_page
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {total_pages}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {str(e)}")
        import traceback
        print(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    print("=" * 60)
    
    structure_ok = check_dataset_structure()
    api_ok = test_api_endpoint()
    
    print("\n" + "=" * 60)
    if structure_ok and api_ok:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("üí° –ï—Å–ª–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è '0 —Ñ–∞–π–ª–æ–≤', –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ /get_videos/")
        print("   2. –ö–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏ JavaScript")
        print("   3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∏ train/dataset/<state_code> —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        print("   2. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")

if __name__ == "__main__":
    main()
